common commands

kubectl create -f any_yaml_file to create an respective object
kubectl replace --force -f file_name   --To delete the object and create again
kubectl get object_name  --to get all the object with default name space
kubectl delete object object_name  --to delete all the object with default name space
kubectl get object object_name  -A/--all-namespace --to get object from all namespaces (A is short of it)
kubectl get object object_name  -n/--namespace name-space_name  --To get the object from perticular namespace
kubectl delete object_name object -n/--namespace name-space_name  --To deete the object from perticular namespace
kubectl create object object_name --image=image_name --port=port_val --label="key=Value"  -- to create object in imperative way 
 -----instead of pod as for pod we need to use run instead of create and alos Kindly check in help if object will create with this or not
kubectl create object object_name --image=image_name --port=port_val --label="key=Value" ... --dry-run=client -o yaml > file_name.yml
       --to not create the object or just get the yaml file ( for this dry run will be use)

#-----------------------------------------------------------------------------------------------

PODs command

kubectl run nginx --image=nginx   #after image, the name is image name that is available at docker hub and we have to provide the
                                  #the same image name but node name we can give anything which is besides run
kubectl get pods   --To get the pods details
kubectl describe pod nginx    -- to ge the more information of the created pod.
kubectl Describe pod pod_name  -- to ge the more information of the created pod.
kubectl get pods -o wide    -- to get some IP, On which node created, etc information.
kubectl create -f file_name.yml    -- to create the pods with yaml file
kubectl run static-busybox --image=busybox --dry-run=client -o yaml --command -- sleep 1000 > sp.yaml
    -- once file create put it to static_pod_path so kubelet will automatically create the static pod
    -- also keep note that command will always be at last and after '--command --' which we write considered as command 
#---------------------------------------------------------------------------------------------

Replication Controller Commands

kubectl create -f RC_file_name.yml --to create the replica controller using yaml file
kubectl get replicationController   -- To check the replica controller list

#-----------------------------------------------------------------------------------------------

ReplicaSet commands

kubectl create -f ReplicaSet_file_name.yml --to create the replica set using yaml file
kubectl get replicaset    -- To check the replica set list
kubectl replace -f replicaset_filename.yaml    -- first change manually in file new replicas and then run this command
kubectl scale --replicas=6 -f replicaset_filename.yaml  --To scale the replicas without modifying the file
kubectl scale --replicas=6 replicaset myapp-replicaset --with replica set name in the type name format. 
kubectl delete replicaset replicaset_name  --To delete the replicaset, it will delete the underlying pods also.
kubectl apply -f replicaSett_file_name.yaml --to apply the changes we have done in yaml file


#----------------------------------------------------------------------------------------------------

Deployment Commands

kubectl create -f deployment_file_name.yaml --to create the deployment using yaml file
kubectl get deployments --to see the newly created deployment
kubectl apply -f deployment_file_name.yaml
kubectl get all --to see all the created objects at once
kubectl apply -f deployment_file_name.yaml --to apply the changes we have done in yaml file
Kubectl set image deployment/deployment_name \pod-container_name=new_image_name  --To update the image in deployment
kubectl rollout status deployment/deployment_name  --To check the status of rollout
kubectl rollout history deployment/deployment_name   --To see the revisions and history of rollout
kubectl rollout undo deployment/deployment_name  --To rollback the changes we have done
kubectl create deployment deployment_name --image=image_name --port=port_val --label="key=Value"
#--------------------------------------------------------------------------------------------------------------------------------

namespace commands

NameSpace Commands

servicename.namespace.svc.cluster.local   --To call the same service from different namespace
kubectl get pods --namespace=kube-system  --To get the pods from different namespace
kubectl create -f pod-definition.yaml --namespace=name_of_namespace   -- To create pods in other namespace
kubectl create namespace name_of_namespace --To create the namespace directly
kubectl create -f namespace_def_file.yaml  --To create the namespace with yaml file
kubectl config set-context $(kubectl config current-context) --namespace=name_of_namespace  --To switch the name space in default
kubectl get pods --all=namespaces  --To get the nodes from all namespaces

#------------------------------------------------------------------------------------------------------------------------

Labels and selector command

kubectl get pods --selector="env=dev"  --To get the pods which has label env=dev
kubectl get all --selector="env=prod"  --To get all the objects from prod environment
kubectl get pods --selector="env=prod,bu=finance,tier=frontend"  --To get the pods which has all 3 labels
kubectl label node node_name key=value  --To apply label to node
#------------------------------------------------------------------------------------------------------------------------

Taints on node

kubectl describe node node01 | grep Taint  --To check the taint is on that node or not
kubectl taint node node01 spray=mortein:NoSchedule   --To apply the taint on the node with no schedule event
ubectl taint nodes controlplane Taint_Name-  --To untain the node

#----------------------------------------------------------------------------------------------
config map

kubectl create configmap my-scheduler-config --from-file /root/my-scheduler-config.yaml --To create config map from file
kubectl create configmap generic <configmap_name> --from-literal=<key>=<value>  -- to pass secret with single key-value
kubectl create configmap generic <configmap_name> --from-literal=<key>=<value> --from-literal=<key>=<value>  -- to pass secret with mult key-value
kubectl create configmap generic <configmap_name> --from-file=<path_to_file>  --To fetch all the value of secret from file
kubectl create configmap generic <configmap_name> --from-file=configmap_val.properties  --To fetch the single value from file
kubectl create configmap -f configmap_file.yaml

#--------------------------------------------------------------------------------------------------------------
Secret App

kubectl create secret generic <secret_name> --from-literal=<key>=<value>  -- to pass secret with single key-value
kubectl create secret generic <secret_name> --from-literal=<key>=<value> --from-literal=<key>=<value>  -- to pass secret with mult key-value
kubectl create secret generic <secret_name> --from-file=<path_to_file>  --To fetch all the value of secret from file
kubectl create secret generic <secret_name> --from-file=secret_val.properties  --To fetch the single value from file
kubectl create secret -f secret_file.yaml

#-------------------------------------------------------------------------------------------
Drain Node

kubectl drain node_name
kubectl cordon node_name
kubectl uncordon node_name

#-----------------------------------------------------------------------------------------------------
Generate CA certificate

 1. ca.key == openssl genrsa -out ca.key 2048
 2. ca.csr == openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr
 3. ca.crt == openssl -x509 -req -in ca.csr -signkey ca.key -out ca.crt
 
Clients Certificates

Admin User
 
  1. ca.key == openssl genrsa -out admin.key 2048
  2 ca.csr == openssl req -new -key admin.key -subj "/CN=kube-admin/OU=system:masters" -out admin.csr   --Take a note that OU is used to define this is
                                                                                                          admin user certificate with system:master
  3 ca.crt == openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -out admin.crt
  
 kube-scheduler
   1. ca.key == openssl genrsa -out scheduler.key 2048
   2. ca.csr == openssl req -new -key scheduler.key  -subj "/CN=systemkube-scheduler" -out scheduler.csr
   3. ca.crt == openssl x509 -req -in scheduler.csr -CA ca.crt -CAkey ca.key -out scheduler.crt
   
kube-control manager
 1. ca.key == openssl genrsa -out controller-manager.key 2048
 2. ca.csr == openssl req -new -key controller.key -subj "/CN=systemkube-control-manager" -out controller.csr
 3. ca.crt == openssl x509 -req -in controller-manager.csr -CA ca.crt -CAkey ca.key -out controller-manager.crt
 
kubeproxy
 1. ca.key == openssl genrsa -out kubeproxy.key 2048
 2. ca.csr == openssl req -new -key kubeproxy.key -subj "/CN=kubeproxy" -out kubeproxy.csr
 3. ca.crt == openssl x509 -req -in kubeproxy.crt -CA ca.crt -CAkey ca.key -out kubeproxy.crt
 
Different Certificates
 1. openssl genrsa -out old-ca.key 2048
 2. openssl req -new -key old-ca.key -subj "/CN=old-ca" -out old-ca.csr
 3. openssl x509 -req -in old-ca.csr -signkey old-ca.key -out old-ca.crt -days 365
 4. openssl x509 -req -in ca.csr -signkey ca.key -out server.crt -days 365
 5. openssl req -new -key apiserver-kubelet-client.key -out apiserver-kubelet-client.csr -subj "/CN=kube-apiserver-kubelet-client/O=system:masters"
 6. openssl req -new -key apiserver-kubelet-client.key -out apiserver-kubelet-client.csr -subj "/CN=kube-apiserver-kubelet-client/O=system:masters"
 7. openssl x509 -req -in apiserver-kubelet-client.csr -CA /root/new-ca/old-ca.crt -CAkey /root/new-ca/old-ca.key -CAcreateserial -out apiserver-kubelet-client-new.crt -days 365
 8. openssl req -new -key apiserver-etcd-client.key -out apiserver-etcd-client.csr -subj "/CN=kube-apiserver-etcd-client/O=system:masters"
 9. openssl x509 -req -in apiserver-etcd-client.csr -CA /root/new-ca/old-ca.crt -CAkey /root/new-ca/old-ca.key -CAcreateserial -out apiserver-etcd-client-new.crt -days 365
10. openssl req -new -key apiserver-etcd-client.key -out apiserver-etcd-client.csr -subj "/CN=kube-apiserver-etcd-client/O=system:masters"
11. openssl x509 -req -in apiserver-etcd-client.csr -CA /root/new-ca/old-ca.crt -CAkey /root/new-ca/old-ca.key -CAcreateserial -out apiserver-etcd-client-new.crt -days 365
12. openssl req -new -key /etc/kubernetes/pki/apiserver-etcd-client.key -out apiserver-etcd-client.csr -subj "/CN=kube-apiserver-etcd-client/O=system:masters"
13. openssl x509 -req -in apiserver-etcd-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out apiserver-etcd-client.crt -days -10
14. openssl x509 -req -in apiserver-etcd-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out apiserver-etcd-client.crt -startdate 190101010101Z
15. "openssl", "req", "-new", "-key" ,"/etc/kubernetes/pki/apiserver-etcd-client.key", "-out", "/etc/kubernetes/pki/apiserver-etcd-client.csr", "-subj", "/CN=kube-apiserver-etcd-
     client/O=system:masters"
16. "openssl", "x509", "-req", "-in", "/etc/kubernetes/pki/apiserver-etcd-client.csr", "-CA", "/etc/kubernetes/pki/etcd/ca.crt", "-CAkey", "/etc/kubernetes/pki/etcd/ca.key", "-CAcreateserial", "-out",
    "/etc/kubernetes/pki/apiserver-etcd-client.crt"
17. openssl x509 -req -in /etc/kubernetes/pki/apiserver-etcd-client.csr -CA /etc/kubernetes/pki/etcd/ca.crt -CAkey /etc/kubernetes/pki/etcd/ca.key -CAcreateserial -out
    /etc/kubernetes/pki/apiserver-etcd-client.crt -days 100
18. openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out apiserver.crt

#--------------------------------------------------------------------------------------------------------------------------
Networking Commands

1. ip link  -- to check the ip link details
2. ip addr add 192.168.1.10/24 dev eth0  --To add the IP to eth0
3. route --To get the routing details
4. ip route add 192.168.2.0/24 via 192.168.1.1 --To add the route so 2 different network connects each other, 
                                                 here first ip is destination and 2nd after via is the gateway

DNS

1. add entry in /etc/host
    192.168.1.11 db    ---Here is (IP name), now we can ping with db for that IP
2. add entry in /etc/resolv.conf
    name  IP
3.  /etc/nsswitch.conf
    hosts file dns   --Here the order is define as network switch will first check in /etc/host then in dns /etc/resolve.conf
                     --we can change the order

Network Name Space

1. ip netns add red  --to add netns to red container
2. ip netns  --To get the list of netns
3. ip netns exec red ip link or ip -n red link  --execute netns command in red container


Establish connectivity between 2 different container

1. ip link add veth-red type veth peer name veth-blue  --HEre veth-red and veth-blue namespace names
2. ip link set veth-red netns red  --To set the ntens to container
3. ip -n red addr add 192.168.15.1 dev veth-red  --To assign the IP to red  netns
4. ip -n red link set veth-rred ip  --to make up the netns
5. ip netns exec red ping 192.168.15.2  --to ping the other netns from red container
6. arp -- to check the arp tabel
7. ip netns exec red arp --to check the arps in red container

